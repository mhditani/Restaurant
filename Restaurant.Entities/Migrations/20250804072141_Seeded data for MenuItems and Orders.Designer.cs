// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Restaurant.Entities.Data;

#nullable disable

namespace Restaurant.Entities.Migrations
{
    [DbContext(typeof(RestaurantDbContext))]
    [Migration("20250804072141_Seeded data for MenuItems and Orders")]
    partial class SeededdataforMenuItemsandOrders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Restaurant.Entities.Domain.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(16,2)");

                    b.HasKey("Id");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Main",
                            Description = "Classic tomato and mozzarella pizza.",
                            ImageUrl = "https://example.com/pizza.jpg",
                            Name = "Margherita Pizza",
                            Price = 9.99m
                        },
                        new
                        {
                            Id = 2,
                            Category = "Main",
                            Description = "Pasta with meat sauce.",
                            ImageUrl = "https://example.com/spaghetti.jpg",
                            Name = "Spaghetti Bolognese",
                            Price = 12.49m
                        },
                        new
                        {
                            Id = 3,
                            Category = "Main",
                            Description = "Romaine lettuce, croutons, parmesan.",
                            ImageUrl = "https://example.com/salad.jpg",
                            Name = "Caesar Salad",
                            Price = 7.99m
                        },
                        new
                        {
                            Id = 4,
                            Category = "Main",
                            Description = "Served with vegetables and rice.",
                            ImageUrl = "https://example.com/chicken.jpg",
                            Name = "Grilled Chicken",
                            Price = 11.99m
                        },
                        new
                        {
                            Id = 5,
                            Category = "Main",
                            Description = "Beef patty with cheese, lettuce, tomato.",
                            ImageUrl = "https://example.com/burger.jpg",
                            Name = "Cheeseburger",
                            Price = 8.50m
                        },
                        new
                        {
                            Id = 6,
                            Category = "Dessert",
                            Description = "Rich chocolate layered cake.",
                            ImageUrl = "https://example.com/cake.jpg",
                            Name = "Chocolate Cake",
                            Price = 4.75m
                        },
                        new
                        {
                            Id = 7,
                            Category = "Dessert",
                            Description = "Two scoops of classic vanilla.",
                            ImageUrl = "https://example.com/icecream.jpg",
                            Name = "Vanilla Ice Cream",
                            Price = 3.99m
                        },
                        new
                        {
                            Id = 8,
                            Category = "Drink",
                            Description = "Chilled soft drink (330ml).",
                            ImageUrl = "https://example.com/coke.jpg",
                            Name = "Coca-Cola",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = 9,
                            Category = "Drink",
                            Description = "Strong black coffee.",
                            ImageUrl = "https://example.com/espresso.jpg",
                            Name = "Espresso",
                            Price = 2.49m
                        },
                        new
                        {
                            Id = 10,
                            Category = "Drink",
                            Description = "Freshly squeezed orange juice.",
                            ImageUrl = "https://example.com/juice.jpg",
                            Name = "Orange Juice",
                            Price = 2.99m
                        });
                });

            modelBuilder.Entity("Restaurant.Entities.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(16,2)");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderDate = new DateTime(2025, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            TotalAmount = 23.50m
                        },
                        new
                        {
                            Id = 2,
                            OrderDate = new DateTime(2025, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            TotalAmount = 45.00m
                        },
                        new
                        {
                            Id = 3,
                            OrderDate = new DateTime(2025, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Cancelled",
                            TotalAmount = 12.75m
                        },
                        new
                        {
                            Id = 4,
                            OrderDate = new DateTime(2025, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TotalAmount = 98.90m
                        },
                        new
                        {
                            Id = 5,
                            OrderDate = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            TotalAmount = 32.20m
                        },
                        new
                        {
                            Id = 6,
                            OrderDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            TotalAmount = 61.99m
                        },
                        new
                        {
                            Id = 7,
                            OrderDate = new DateTime(2025, 7, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TotalAmount = 18.00m
                        },
                        new
                        {
                            Id = 8,
                            OrderDate = new DateTime(2025, 7, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            TotalAmount = 70.15m
                        },
                        new
                        {
                            Id = 9,
                            OrderDate = new DateTime(2025, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Cancelled",
                            TotalAmount = 49.99m
                        },
                        new
                        {
                            Id = 10,
                            OrderDate = new DateTime(2025, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TotalAmount = 25.50m
                        },
                        new
                        {
                            Id = 11,
                            OrderDate = new DateTime(2025, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            TotalAmount = 31.80m
                        },
                        new
                        {
                            Id = 12,
                            OrderDate = new DateTime(2025, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            TotalAmount = 42.00m
                        },
                        new
                        {
                            Id = 13,
                            OrderDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TotalAmount = 66.66m
                        },
                        new
                        {
                            Id = 14,
                            OrderDate = new DateTime(2025, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TotalAmount = 15.00m
                        },
                        new
                        {
                            Id = 15,
                            OrderDate = new DateTime(2025, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            TotalAmount = 89.99m
                        });
                });

            modelBuilder.Entity("Restaurant.Entities.Domain.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(16,2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Restaurant.Entities.Domain.OrderItem", b =>
                {
                    b.HasOne("Restaurant.Entities.Domain.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restaurant.Entities.Domain.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Restaurant.Entities.Domain.MenuItem", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Restaurant.Entities.Domain.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
